# Getting started

Plugins in GoCD are implemented in Java and packaged as a JAR file.

## Structure of a GoCD Plugin

> A plugin for GoCD is a JAR file with the following structure

```
plugin.jar
|
|-- plugin.xml
|-- com
|   \-- example
|       \-- go
|           \-- testplugin
|               \-- <%= plugin_class %>.class
|               \-- x.class
|               \-- y.class
\-- lib
    \-- dependency-1.jar
    \-- dependency-2.jar
```

The plugin jar is a self contained-jar, it is expected to contain the following inside it —

* `plugin.xml` — the [metadata](#the-plugin-metadata) of your plugin
* the [plugin extension class](#the-plugin-extension-class) (`<%= plugin_class %>.class` in the example shown) and any other classes that form your plugin 
* any optional [dependencies](#the-plugin-dependencies) your plugin may requires (inside the `lib`)

<a id='the-plugin-metadata'></a>

### The plugin metadata `plugin.xml`

> Here is an example `plugin.xml`

```xml
<?xml version="1.0" encoding="utf-8" ?>
<!-- Your plugin id and version
     of this XML document, the
     version must be set to "1" -->
<go-plugin
  id="com.example.rocket.launcher"
  version="1">
  <about>
    <!-- The name of your plugin -->
    <name>Launches rockets</name>
    <!--  The version of your plugin -->
    <version>0.0.1</version>
    <!-- The minimum version of GoCD that this plugin requires -->
    <target-go-version><%= minimum_version %></target-go-version>
    <!-- A longer description of your plugin  -->
    <description>Launches rockets, spaceships and other things to a destination of your choice.</description>

    <!-- Tell us who you are -->
    <vendor>
      <name>ACME Corp</name>
      <url>https://www.example.com</url>
    </vendor>

    <!-- If this plugin only supports certain OSes -->
    <target-os>
      <value>Linux</value>
      <value>Windows</value>
    </target-os>
  </about>
</go-plugin>
```

This is an XML file that should be present in the plugin jar file at the top level.

You can find the XML Schema for the plugins in the  [main repository](https://github.com/gocd/gocd/blob/master/plugin-infra/go-plugin-api/resources/plugin-descriptor.xsd).

<a name='the-plugin-extension-class'></a>

### The plugin extension class

> Add this to your maven `pom.xml`

```xml
<dependency>
	<groupId>cd.go.plugin</groupId>
	<artifactId>go-plugin-api</artifactId>
	<version><%= GOCD_VERSION %></version>
</dependency>
```

In order to use the plugin extension class, you must add the following to your maven dependencies. If you're using [gradle](https://gradle.org), then use `cd.go.plugin:go-plugin-api:<%= GOCD_VERSION %>`. You can find the latest version of the plugin in [maven central](http://mvnrepository.com/artifact/cd.go.plugin/go-plugin-api).

<div style='clear: both;'></div>

> An example plugin class implementation

```java
package com.example.go.testplugin;

import com.thoughtworks.go.plugin.api.*;
import com.thoughtworks.go.plugin.api.annotation.*;
import com.thoughtworks.go.plugin.api.exceptions.*;
import com.thoughtworks.go.plugin.api.request.*;
import com.thoughtworks.go.plugin.api.response.*;
import com.google.gson.Gson;
import java.util.*;

@Extension
public class <%= plugin_class %> implements GoPlugin {
  private GoApplicationAccessor accessor;

  // this method is executed once at startup
  public void initializeGoApplicationAccessor(GoApplicationAccessor accessor) {
    this.accessor = accessor;
  }

  // a GoPluginIdentifier tells GoCD what kind of a plugin this is
  // and what version(s) of the request/response API it supports
  public GoPluginIdentifier pluginIdentifier() {
    return new GoPluginIdentifier("<%= plugin_type %>", Arrays.asList("<%= endpoint_version %>"))
  }

  // handle the request and return a response
  // the response is very much like a HTTP response —
  // it has a status code, a response body and optional headers
  public GoPluginApiResponse handle(GoPluginApiRequest request) throws UnhandledRequestTypeException {
    if (request.requestName().equals("go.plugin-settings.get-view")) {
      String viewHtml = read(getClass().getResourceAsStream("/plugin-settings.template.html"));
      return new DefaultGoPluginApiResponse(200, viewHtml);
    if (request.requestName().equals("go.plugin-settings.validate-configuration")) {
      List errors = validate(request);
      return new DefaultGoPluginApiResponse(200, new Gson().toJson(errors));
    } else {
      throw new UnhandledRequestTypeException(request.requestName());
    }
  }
}
```

The plugin extension class is a Java class that implements the `GoPlugin` interface.

The other types in the example are —

<p class='attributes-table-follows'></p>

| Type                    | Description |
| ----------------------- | ----------- |
| [`GoApplicationAccessor`](#requests-to-the-gocd-server) | So that the plugin can make requests to the GoCD application to get additional information that is not provided by each request. For example, the plugin can ask for settings, credentials etc. |
| `GoPluginIdentifier`    | Provides information about the type of plugin and the version of the request/response it supports. |
| `GoPluginApiRequest`    | Represents the request message sent from GoCD to a plugin. The message will have a name and an optional JSON request body and the version of the extension. |
| `GoPluginApiResponse`   | Represents the response message as a result of processing the `GoPluginApiRequest`. Similar to `GoPluginApiRequest`, the response will have a status code and an optional JSON response body. |

If you're familiar with http request/responses handled by a web application, you will find this very familiar.

<aside class="notice">
  GoCD has built in support for allowing plugins to enhance their capabilities in the future without having to break compatibility. This is achieved by ensuring that each extension-point and messages that are sent to the plugin are versioned.
</aside>

<a id='the-plugin-dependencies'></a>

### The plugin dependencies

Any dependencies that your plugin requires, should go into the `lib` directory inside the plugin JAR.

## Logging for plugins

Every plugin is provided with a `com.thoughtworks.go.plugin.api.logging.Logger` that can be used by the plugins. 

Each plugin will have a separate log file corresponding to it. The log file name is of the format **plugin-plugin-id.log**. The plugin log files will be in the same directory as the GoCD server log.

The default logging level for the plugin is set to INFO. Users can override the default value by setting system property `plugin.pluginId_placeholder.log.level` to the required logging level. For example, to set the logging level to WARN for plugin with id `yum-poller`, system property `plugin.yum-poller.log.level` should be set to WARN for GoCD server .

For usage, look at the javadocs for `com.thoughtworks.go.plugin.api.logging.Logger` available on [Maven Central](https://search.maven.org/#search%7Cga%7C1%7Cgo-plugin-api)

## Javadocs

Javadocs associated with the available versions of go-plugin-api jar can be found on [Maven Central](https://search.maven.org/#search%7Cga%7C1%7Cgo-plugin-api).